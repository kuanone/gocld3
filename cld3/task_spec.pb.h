// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_spec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_task_5fspec_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_task_5fspec_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_task_5fspec_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_task_5fspec_2eproto {
  static const ::uint32_t offsets[];
};
namespace chrome_lang_id {
class TaskInput;
struct TaskInputDefaultTypeInternal;
extern TaskInputDefaultTypeInternal _TaskInput_default_instance_;
class TaskInput_Part;
struct TaskInput_PartDefaultTypeInternal;
extern TaskInput_PartDefaultTypeInternal _TaskInput_Part_default_instance_;
class TaskOutput;
struct TaskOutputDefaultTypeInternal;
extern TaskOutputDefaultTypeInternal _TaskOutput_default_instance_;
class TaskSpec;
struct TaskSpecDefaultTypeInternal;
extern TaskSpecDefaultTypeInternal _TaskSpec_default_instance_;
class TaskSpec_Parameter;
struct TaskSpec_ParameterDefaultTypeInternal;
extern TaskSpec_ParameterDefaultTypeInternal _TaskSpec_Parameter_default_instance_;
}  // namespace chrome_lang_id
namespace google {
namespace protobuf {
template <>
::chrome_lang_id::TaskInput* Arena::CreateMaybeMessage<::chrome_lang_id::TaskInput>(Arena*);
template <>
::chrome_lang_id::TaskInput_Part* Arena::CreateMaybeMessage<::chrome_lang_id::TaskInput_Part>(Arena*);
template <>
::chrome_lang_id::TaskOutput* Arena::CreateMaybeMessage<::chrome_lang_id::TaskOutput>(Arena*);
template <>
::chrome_lang_id::TaskSpec* Arena::CreateMaybeMessage<::chrome_lang_id::TaskSpec>(Arena*);
template <>
::chrome_lang_id::TaskSpec_Parameter* Arena::CreateMaybeMessage<::chrome_lang_id::TaskSpec_Parameter>(Arena*);
}  // namespace protobuf
}  // namespace google

namespace chrome_lang_id {

// ===================================================================


// -------------------------------------------------------------------

class TaskInput_Part final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.TaskInput.Part) */ {
 public:
  inline TaskInput_Part() : TaskInput_Part(nullptr) {}
  ~TaskInput_Part() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskInput_Part(::google::protobuf::internal::ConstantInitialized);

  TaskInput_Part(const TaskInput_Part& from);
  TaskInput_Part(TaskInput_Part&& from) noexcept
    : TaskInput_Part() {
    *this = ::std::move(from);
  }

  inline TaskInput_Part& operator=(const TaskInput_Part& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskInput_Part& operator=(TaskInput_Part&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TaskInput_Part& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskInput_Part* internal_default_instance() {
    return reinterpret_cast<const TaskInput_Part*>(
               &_TaskInput_Part_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskInput_Part& a, TaskInput_Part& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskInput_Part* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskInput_Part* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskInput_Part* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskInput_Part>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const TaskInput_Part& from);
  void MergeFrom(const TaskInput_Part& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskInput_Part* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chrome_lang_id.TaskInput.Part";
  }
  protected:
  explicit TaskInput_Part(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePatternFieldNumber = 7,
    kFileFormatFieldNumber = 8,
    kRecordFormatFieldNumber = 9,
  };
  // optional string file_pattern = 7;
  bool has_file_pattern() const;
  void clear_file_pattern() ;
  const std::string& file_pattern() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_pattern(Arg_&& arg, Args_... args);
  std::string* mutable_file_pattern();
  PROTOBUF_NODISCARD std::string* release_file_pattern();
  void set_allocated_file_pattern(std::string* ptr);

  private:
  const std::string& _internal_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_pattern(
      const std::string& value);
  std::string* _internal_mutable_file_pattern();

  public:
  // optional string file_format = 8;
  bool has_file_format() const;
  void clear_file_format() ;
  const std::string& file_format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_format(Arg_&& arg, Args_... args);
  std::string* mutable_file_format();
  PROTOBUF_NODISCARD std::string* release_file_format();
  void set_allocated_file_format(std::string* ptr);

  private:
  const std::string& _internal_file_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_format(
      const std::string& value);
  std::string* _internal_mutable_file_format();

  public:
  // optional string record_format = 9;
  bool has_record_format() const;
  void clear_record_format() ;
  const std::string& record_format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_record_format(Arg_&& arg, Args_... args);
  std::string* mutable_record_format();
  PROTOBUF_NODISCARD std::string* release_record_format();
  void set_allocated_record_format(std::string* ptr);

  private:
  const std::string& _internal_record_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_format(
      const std::string& value);
  std::string* _internal_mutable_record_format();

  public:
  // @@protoc_insertion_point(class_scope:chrome_lang_id.TaskInput.Part)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr file_pattern_;
    ::google::protobuf::internal::ArenaStringPtr file_format_;
    ::google::protobuf::internal::ArenaStringPtr record_format_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_task_5fspec_2eproto;
};// -------------------------------------------------------------------

class TaskInput final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.TaskInput) */ {
 public:
  inline TaskInput() : TaskInput(nullptr) {}
  ~TaskInput() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskInput(::google::protobuf::internal::ConstantInitialized);

  TaskInput(const TaskInput& from);
  TaskInput(TaskInput&& from) noexcept
    : TaskInput() {
    *this = ::std::move(from);
  }

  inline TaskInput& operator=(const TaskInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskInput& operator=(TaskInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TaskInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskInput* internal_default_instance() {
    return reinterpret_cast<const TaskInput*>(
               &_TaskInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskInput& a, TaskInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskInput* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskInput* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskInput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const TaskInput& from);
  void MergeFrom(const TaskInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskInput* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chrome_lang_id.TaskInput";
  }
  protected:
  explicit TaskInput(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TaskInput_Part Part;

  // accessors -------------------------------------------------------

  enum : int {
    kFileFormatFieldNumber = 3,
    kRecordFormatFieldNumber = 4,
    kPartFieldNumber = 6,
    kNameFieldNumber = 1,
    kCreatorFieldNumber = 2,
    kMultiFileFieldNumber = 5,
  };
  // repeated string file_format = 3;
  int file_format_size() const;
  private:
  int _internal_file_format_size() const;

  public:
  void clear_file_format() ;
  const std::string& file_format(int index) const;
  std::string* mutable_file_format(int index);
  void set_file_format(int index, const std::string& value);
  void set_file_format(int index, std::string&& value);
  void set_file_format(int index, const char* value);
  void set_file_format(int index, const char* value, std::size_t size);
  void set_file_format(int index, absl::string_view value);
  std::string* add_file_format();
  void add_file_format(const std::string& value);
  void add_file_format(std::string&& value);
  void add_file_format(const char* value);
  void add_file_format(const char* value, std::size_t size);
  void add_file_format(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& file_format() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_file_format();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_file_format() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_file_format();

  public:
  // repeated string record_format = 4;
  int record_format_size() const;
  private:
  int _internal_record_format_size() const;

  public:
  void clear_record_format() ;
  const std::string& record_format(int index) const;
  std::string* mutable_record_format(int index);
  void set_record_format(int index, const std::string& value);
  void set_record_format(int index, std::string&& value);
  void set_record_format(int index, const char* value);
  void set_record_format(int index, const char* value, std::size_t size);
  void set_record_format(int index, absl::string_view value);
  std::string* add_record_format();
  void add_record_format(const std::string& value);
  void add_record_format(std::string&& value);
  void add_record_format(const char* value);
  void add_record_format(const char* value, std::size_t size);
  void add_record_format(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& record_format() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_record_format();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_record_format() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_record_format();

  public:
  // repeated group Part = 6 { ... };
  int part_size() const;
  private:
  int _internal_part_size() const;

  public:
  void clear_part() ;
  ::chrome_lang_id::TaskInput_Part* mutable_part(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part >*
      mutable_part();
  private:
  const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskInput_Part>& _internal_part() const;
  ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskInput_Part>* _internal_mutable_part();
  public:
  const ::chrome_lang_id::TaskInput_Part& part(int index) const;
  ::chrome_lang_id::TaskInput_Part* add_part();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part >&
      part() const;
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string creator = 2;
  bool has_creator() const;
  void clear_creator() ;
  const std::string& creator() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creator(Arg_&& arg, Args_... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* ptr);

  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(
      const std::string& value);
  std::string* _internal_mutable_creator();

  public:
  // optional bool multi_file = 5 [default = false];
  bool has_multi_file() const;
  void clear_multi_file() ;
  bool multi_file() const;
  void set_multi_file(bool value);

  private:
  bool _internal_multi_file() const;
  void _internal_set_multi_file(bool value);

  public:
  // @@protoc_insertion_point(class_scope:chrome_lang_id.TaskInput)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> file_format_;
    ::google::protobuf::RepeatedPtrField<std::string> record_format_;
    ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part > part_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr creator_;
    bool multi_file_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_task_5fspec_2eproto;
};// -------------------------------------------------------------------

class TaskOutput final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.TaskOutput) */ {
 public:
  inline TaskOutput() : TaskOutput(nullptr) {}
  ~TaskOutput() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskOutput(::google::protobuf::internal::ConstantInitialized);

  TaskOutput(const TaskOutput& from);
  TaskOutput(TaskOutput&& from) noexcept
    : TaskOutput() {
    *this = ::std::move(from);
  }

  inline TaskOutput& operator=(const TaskOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskOutput& operator=(TaskOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TaskOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskOutput* internal_default_instance() {
    return reinterpret_cast<const TaskOutput*>(
               &_TaskOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskOutput& a, TaskOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskOutput* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskOutput* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskOutput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const TaskOutput& from);
  void MergeFrom(const TaskOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskOutput* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chrome_lang_id.TaskOutput";
  }
  protected:
  explicit TaskOutput(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFileFormatFieldNumber = 2,
    kRecordFormatFieldNumber = 3,
    kFileBaseFieldNumber = 5,
    kFileExtensionFieldNumber = 6,
    kShardsFieldNumber = 4,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string file_format = 2;
  bool has_file_format() const;
  void clear_file_format() ;
  const std::string& file_format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_format(Arg_&& arg, Args_... args);
  std::string* mutable_file_format();
  PROTOBUF_NODISCARD std::string* release_file_format();
  void set_allocated_file_format(std::string* ptr);

  private:
  const std::string& _internal_file_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_format(
      const std::string& value);
  std::string* _internal_mutable_file_format();

  public:
  // optional string record_format = 3;
  bool has_record_format() const;
  void clear_record_format() ;
  const std::string& record_format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_record_format(Arg_&& arg, Args_... args);
  std::string* mutable_record_format();
  PROTOBUF_NODISCARD std::string* release_record_format();
  void set_allocated_record_format(std::string* ptr);

  private:
  const std::string& _internal_record_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_format(
      const std::string& value);
  std::string* _internal_mutable_record_format();

  public:
  // optional string file_base = 5;
  bool has_file_base() const;
  void clear_file_base() ;
  const std::string& file_base() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_base(Arg_&& arg, Args_... args);
  std::string* mutable_file_base();
  PROTOBUF_NODISCARD std::string* release_file_base();
  void set_allocated_file_base(std::string* ptr);

  private:
  const std::string& _internal_file_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_base(
      const std::string& value);
  std::string* _internal_mutable_file_base();

  public:
  // optional string file_extension = 6;
  bool has_file_extension() const;
  void clear_file_extension() ;
  const std::string& file_extension() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_extension(Arg_&& arg, Args_... args);
  std::string* mutable_file_extension();
  PROTOBUF_NODISCARD std::string* release_file_extension();
  void set_allocated_file_extension(std::string* ptr);

  private:
  const std::string& _internal_file_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_extension(
      const std::string& value);
  std::string* _internal_mutable_file_extension();

  public:
  // optional int32 shards = 4 [default = 0];
  bool has_shards() const;
  void clear_shards() ;
  ::int32_t shards() const;
  void set_shards(::int32_t value);

  private:
  ::int32_t _internal_shards() const;
  void _internal_set_shards(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chrome_lang_id.TaskOutput)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr file_format_;
    ::google::protobuf::internal::ArenaStringPtr record_format_;
    ::google::protobuf::internal::ArenaStringPtr file_base_;
    ::google::protobuf::internal::ArenaStringPtr file_extension_;
    ::int32_t shards_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_task_5fspec_2eproto;
};// -------------------------------------------------------------------

class TaskSpec_Parameter final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.TaskSpec.Parameter) */ {
 public:
  inline TaskSpec_Parameter() : TaskSpec_Parameter(nullptr) {}
  ~TaskSpec_Parameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskSpec_Parameter(::google::protobuf::internal::ConstantInitialized);

  TaskSpec_Parameter(const TaskSpec_Parameter& from);
  TaskSpec_Parameter(TaskSpec_Parameter&& from) noexcept
    : TaskSpec_Parameter() {
    *this = ::std::move(from);
  }

  inline TaskSpec_Parameter& operator=(const TaskSpec_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskSpec_Parameter& operator=(TaskSpec_Parameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TaskSpec_Parameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskSpec_Parameter* internal_default_instance() {
    return reinterpret_cast<const TaskSpec_Parameter*>(
               &_TaskSpec_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskSpec_Parameter& a, TaskSpec_Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskSpec_Parameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskSpec_Parameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskSpec_Parameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskSpec_Parameter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const TaskSpec_Parameter& from);
  void MergeFrom(const TaskSpec_Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskSpec_Parameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chrome_lang_id.TaskSpec.Parameter";
  }
  protected:
  explicit TaskSpec_Parameter(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kValueFieldNumber = 5,
  };
  // required string name = 4;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string value = 5;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:chrome_lang_id.TaskSpec.Parameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_task_5fspec_2eproto;
};// -------------------------------------------------------------------

class TaskSpec final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.TaskSpec) */ {
 public:
  inline TaskSpec() : TaskSpec(nullptr) {}
  ~TaskSpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskSpec(::google::protobuf::internal::ConstantInitialized);

  TaskSpec(const TaskSpec& from);
  TaskSpec(TaskSpec&& from) noexcept
    : TaskSpec() {
    *this = ::std::move(from);
  }

  inline TaskSpec& operator=(const TaskSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskSpec& operator=(TaskSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TaskSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskSpec* internal_default_instance() {
    return reinterpret_cast<const TaskSpec*>(
               &_TaskSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskSpec& a, TaskSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskSpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskSpec* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskSpec>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const TaskSpec& from);
  void MergeFrom(const TaskSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskSpec* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chrome_lang_id.TaskSpec";
  }
  protected:
  explicit TaskSpec(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TaskSpec_Parameter Parameter;

  // accessors -------------------------------------------------------

  enum : int {
    kParameterFieldNumber = 3,
    kInputFieldNumber = 6,
    kOutputFieldNumber = 7,
    kTaskNameFieldNumber = 1,
    kTaskTypeFieldNumber = 2,
  };
  // repeated group Parameter = 3 { ... };
  int parameter_size() const;
  private:
  int _internal_parameter_size() const;

  public:
  void clear_parameter() ;
  ::chrome_lang_id::TaskSpec_Parameter* mutable_parameter(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter >*
      mutable_parameter();
  private:
  const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskSpec_Parameter>& _internal_parameter() const;
  ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskSpec_Parameter>* _internal_mutable_parameter();
  public:
  const ::chrome_lang_id::TaskSpec_Parameter& parameter(int index) const;
  ::chrome_lang_id::TaskSpec_Parameter* add_parameter();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter >&
      parameter() const;
  // repeated .chrome_lang_id.TaskInput input = 6;
  int input_size() const;
  private:
  int _internal_input_size() const;

  public:
  void clear_input() ;
  ::chrome_lang_id::TaskInput* mutable_input(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput >*
      mutable_input();
  private:
  const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskInput>& _internal_input() const;
  ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskInput>* _internal_mutable_input();
  public:
  const ::chrome_lang_id::TaskInput& input(int index) const;
  ::chrome_lang_id::TaskInput* add_input();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput >&
      input() const;
  // repeated .chrome_lang_id.TaskOutput output = 7;
  int output_size() const;
  private:
  int _internal_output_size() const;

  public:
  void clear_output() ;
  ::chrome_lang_id::TaskOutput* mutable_output(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput >*
      mutable_output();
  private:
  const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskOutput>& _internal_output() const;
  ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskOutput>* _internal_mutable_output();
  public:
  const ::chrome_lang_id::TaskOutput& output(int index) const;
  ::chrome_lang_id::TaskOutput* add_output();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput >&
      output() const;
  // optional string task_name = 1;
  bool has_task_name() const;
  void clear_task_name() ;
  const std::string& task_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_name(Arg_&& arg, Args_... args);
  std::string* mutable_task_name();
  PROTOBUF_NODISCARD std::string* release_task_name();
  void set_allocated_task_name(std::string* ptr);

  private:
  const std::string& _internal_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_name(
      const std::string& value);
  std::string* _internal_mutable_task_name();

  public:
  // optional string task_type = 2;
  bool has_task_type() const;
  void clear_task_type() ;
  const std::string& task_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_type(Arg_&& arg, Args_... args);
  std::string* mutable_task_type();
  PROTOBUF_NODISCARD std::string* release_task_type();
  void set_allocated_task_type(std::string* ptr);

  private:
  const std::string& _internal_task_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_type(
      const std::string& value);
  std::string* _internal_mutable_task_type();

  public:
  // @@protoc_insertion_point(class_scope:chrome_lang_id.TaskSpec)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter > parameter_;
    ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput > input_;
    ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput > output_;
    ::google::protobuf::internal::ArenaStringPtr task_name_;
    ::google::protobuf::internal::ArenaStringPtr task_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_task_5fspec_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TaskInput_Part

// optional string file_pattern = 7;
inline bool TaskInput_Part::has_file_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TaskInput_Part::clear_file_pattern() {
  _impl_.file_pattern_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskInput_Part::file_pattern() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.Part.file_pattern)
  return _internal_file_pattern();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskInput_Part::set_file_pattern(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_pattern_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.Part.file_pattern)
}
inline std::string* TaskInput_Part::mutable_file_pattern() {
  std::string* _s = _internal_mutable_file_pattern();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.Part.file_pattern)
  return _s;
}
inline const std::string& TaskInput_Part::_internal_file_pattern() const {
  return _impl_.file_pattern_.Get();
}
inline void TaskInput_Part::_internal_set_file_pattern(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_pattern_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskInput_Part::_internal_mutable_file_pattern() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_pattern_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskInput_Part::release_file_pattern() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.Part.file_pattern)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.file_pattern_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_pattern_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskInput_Part::set_allocated_file_pattern(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_pattern_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_pattern_.IsDefault()) {
          _impl_.file_pattern_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.Part.file_pattern)
}

// optional string file_format = 8;
inline bool TaskInput_Part::has_file_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TaskInput_Part::clear_file_format() {
  _impl_.file_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskInput_Part::file_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.Part.file_format)
  return _internal_file_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskInput_Part::set_file_format(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.file_format_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.Part.file_format)
}
inline std::string* TaskInput_Part::mutable_file_format() {
  std::string* _s = _internal_mutable_file_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.Part.file_format)
  return _s;
}
inline const std::string& TaskInput_Part::_internal_file_format() const {
  return _impl_.file_format_.Get();
}
inline void TaskInput_Part::_internal_set_file_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.file_format_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskInput_Part::_internal_mutable_file_format() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.file_format_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskInput_Part::release_file_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.Part.file_format)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.file_format_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_format_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskInput_Part::set_allocated_file_format(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.file_format_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_format_.IsDefault()) {
          _impl_.file_format_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.Part.file_format)
}

// optional string record_format = 9;
inline bool TaskInput_Part::has_record_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TaskInput_Part::clear_record_format() {
  _impl_.record_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TaskInput_Part::record_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.Part.record_format)
  return _internal_record_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskInput_Part::set_record_format(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.record_format_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.Part.record_format)
}
inline std::string* TaskInput_Part::mutable_record_format() {
  std::string* _s = _internal_mutable_record_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.Part.record_format)
  return _s;
}
inline const std::string& TaskInput_Part::_internal_record_format() const {
  return _impl_.record_format_.Get();
}
inline void TaskInput_Part::_internal_set_record_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.record_format_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskInput_Part::_internal_mutable_record_format() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.record_format_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskInput_Part::release_record_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.Part.record_format)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.record_format_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.record_format_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskInput_Part::set_allocated_record_format(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.record_format_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.record_format_.IsDefault()) {
          _impl_.record_format_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.Part.record_format)
}

// -------------------------------------------------------------------

// TaskInput

// required string name = 1;
inline bool TaskInput::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TaskInput::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskInput::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskInput::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.name)
}
inline std::string* TaskInput::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.name)
  return _s;
}
inline const std::string& TaskInput::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TaskInput::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskInput::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskInput::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskInput::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.name)
}

// optional string creator = 2;
inline bool TaskInput::has_creator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TaskInput::clear_creator() {
  _impl_.creator_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskInput::creator() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.creator)
  return _internal_creator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskInput::set_creator(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.creator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.creator)
}
inline std::string* TaskInput::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.creator)
  return _s;
}
inline const std::string& TaskInput::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void TaskInput::_internal_set_creator(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskInput::_internal_mutable_creator() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.creator_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskInput::release_creator() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.creator)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.creator_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskInput::set_allocated_creator(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.creator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.creator_.IsDefault()) {
          _impl_.creator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.creator)
}

// repeated string file_format = 3;
inline int TaskInput::_internal_file_format_size() const {
  return _internal_file_format().size();
}
inline int TaskInput::file_format_size() const {
  return _internal_file_format_size();
}
inline void TaskInput::clear_file_format() {
  _internal_mutable_file_format()->Clear();
}
inline std::string* TaskInput::add_file_format() {
  PROTOBUF_TSAN_WRITE(&_impl_);
  std::string* _s = _internal_mutable_file_format()->Add();
  // @@protoc_insertion_point(field_add_mutable:chrome_lang_id.TaskInput.file_format)
  return _s;
}
inline const std::string& TaskInput::file_format(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.file_format)
  return _internal_file_format().Get(index);
}
inline std::string* TaskInput::mutable_file_format(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.file_format)
  return _internal_mutable_file_format()->Mutable(index);
}
inline void TaskInput::set_file_format(int index, const std::string& value) {
  _internal_mutable_file_format()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::set_file_format(int index, std::string&& value) {
  _internal_mutable_file_format()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::set_file_format(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_file_format()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::set_file_format(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_file_format()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::set_file_format(int index, absl::string_view value) {
  _internal_mutable_file_format()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::add_file_format(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_);
  _internal_mutable_file_format()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::add_file_format(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_);
  _internal_mutable_file_format()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::add_file_format(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_);
  _internal_mutable_file_format()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::add_file_format(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_);
  _internal_mutable_file_format()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::add_file_format(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_);
  _internal_mutable_file_format()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:chrome_lang_id.TaskInput.file_format)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TaskInput::file_format() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskInput.file_format)
  return _internal_file_format();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* TaskInput::mutable_file_format() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskInput.file_format)
  PROTOBUF_TSAN_WRITE(&_impl_);
  return _internal_mutable_file_format();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TaskInput::_internal_file_format() const {
  PROTOBUF_TSAN_READ(&_impl_);
  return _impl_.file_format_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TaskInput::_internal_mutable_file_format() {
  PROTOBUF_TSAN_READ(&_impl_);
  return &_impl_.file_format_;
}

// repeated string record_format = 4;
inline int TaskInput::_internal_record_format_size() const {
  return _internal_record_format().size();
}
inline int TaskInput::record_format_size() const {
  return _internal_record_format_size();
}
inline void TaskInput::clear_record_format() {
  _internal_mutable_record_format()->Clear();
}
inline std::string* TaskInput::add_record_format() {
  PROTOBUF_TSAN_WRITE(&_impl_);
  std::string* _s = _internal_mutable_record_format()->Add();
  // @@protoc_insertion_point(field_add_mutable:chrome_lang_id.TaskInput.record_format)
  return _s;
}
inline const std::string& TaskInput::record_format(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.record_format)
  return _internal_record_format().Get(index);
}
inline std::string* TaskInput::mutable_record_format(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.record_format)
  return _internal_mutable_record_format()->Mutable(index);
}
inline void TaskInput::set_record_format(int index, const std::string& value) {
  _internal_mutable_record_format()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::set_record_format(int index, std::string&& value) {
  _internal_mutable_record_format()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::set_record_format(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_record_format()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::set_record_format(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_record_format()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::set_record_format(int index, absl::string_view value) {
  _internal_mutable_record_format()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::add_record_format(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_);
  _internal_mutable_record_format()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::add_record_format(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_);
  _internal_mutable_record_format()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::add_record_format(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_);
  _internal_mutable_record_format()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::add_record_format(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_);
  _internal_mutable_record_format()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::add_record_format(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_);
  _internal_mutable_record_format()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:chrome_lang_id.TaskInput.record_format)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TaskInput::record_format() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskInput.record_format)
  return _internal_record_format();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* TaskInput::mutable_record_format() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskInput.record_format)
  PROTOBUF_TSAN_WRITE(&_impl_);
  return _internal_mutable_record_format();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TaskInput::_internal_record_format() const {
  PROTOBUF_TSAN_READ(&_impl_);
  return _impl_.record_format_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TaskInput::_internal_mutable_record_format() {
  PROTOBUF_TSAN_READ(&_impl_);
  return &_impl_.record_format_;
}

// optional bool multi_file = 5 [default = false];
inline bool TaskInput::has_multi_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TaskInput::clear_multi_file() {
  _impl_.multi_file_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TaskInput::multi_file() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.multi_file)
  return _internal_multi_file();
}
inline void TaskInput::set_multi_file(bool value) {
  _internal_set_multi_file(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.multi_file)
}
inline bool TaskInput::_internal_multi_file() const {
  return _impl_.multi_file_;
}
inline void TaskInput::_internal_set_multi_file(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.multi_file_ = value;
}

// repeated group Part = 6 { ... };
inline int TaskInput::_internal_part_size() const {
  return _internal_part().size();
}
inline int TaskInput::part_size() const {
  return _internal_part_size();
}
inline void TaskInput::clear_part() {
  _internal_mutable_part()->Clear();
}
inline ::chrome_lang_id::TaskInput_Part* TaskInput::mutable_part(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.part)
  return _internal_mutable_part()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part >*
TaskInput::mutable_part() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskInput.part)
  PROTOBUF_TSAN_WRITE(&_impl_);
  return _internal_mutable_part();
}
inline const ::chrome_lang_id::TaskInput_Part& TaskInput::part(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.part)
    return _internal_part().Get(index);
}
inline ::chrome_lang_id::TaskInput_Part* TaskInput::add_part() {
  PROTOBUF_TSAN_WRITE(&_impl_);
  ::chrome_lang_id::TaskInput_Part* _add = _internal_mutable_part()->Add();
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.part)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part >&
TaskInput::part() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskInput.part)
  return _internal_part();
}
inline const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskInput_Part>&
TaskInput::_internal_part() const {
  PROTOBUF_TSAN_READ(&_impl_);
  return _impl_.part_;
}
inline ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskInput_Part>*
TaskInput::_internal_mutable_part() {
  PROTOBUF_TSAN_READ(&_impl_);
  return &_impl_.part_;
}

// -------------------------------------------------------------------

// TaskOutput

// required string name = 1;
inline bool TaskOutput::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TaskOutput::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskOutput::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskOutput::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.name)
}
inline std::string* TaskOutput::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.name)
  return _s;
}
inline const std::string& TaskOutput::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TaskOutput::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskOutput::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskOutput::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskOutput::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.name)
}

// optional string file_format = 2;
inline bool TaskOutput::has_file_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TaskOutput::clear_file_format() {
  _impl_.file_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskOutput::file_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.file_format)
  return _internal_file_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskOutput::set_file_format(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.file_format_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.file_format)
}
inline std::string* TaskOutput::mutable_file_format() {
  std::string* _s = _internal_mutable_file_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.file_format)
  return _s;
}
inline const std::string& TaskOutput::_internal_file_format() const {
  return _impl_.file_format_.Get();
}
inline void TaskOutput::_internal_set_file_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.file_format_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskOutput::_internal_mutable_file_format() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.file_format_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskOutput::release_file_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.file_format)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.file_format_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_format_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskOutput::set_allocated_file_format(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.file_format_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_format_.IsDefault()) {
          _impl_.file_format_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.file_format)
}

// optional string record_format = 3;
inline bool TaskOutput::has_record_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TaskOutput::clear_record_format() {
  _impl_.record_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TaskOutput::record_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.record_format)
  return _internal_record_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskOutput::set_record_format(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.record_format_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.record_format)
}
inline std::string* TaskOutput::mutable_record_format() {
  std::string* _s = _internal_mutable_record_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.record_format)
  return _s;
}
inline const std::string& TaskOutput::_internal_record_format() const {
  return _impl_.record_format_.Get();
}
inline void TaskOutput::_internal_set_record_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.record_format_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskOutput::_internal_mutable_record_format() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.record_format_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskOutput::release_record_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.record_format)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.record_format_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.record_format_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskOutput::set_allocated_record_format(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.record_format_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.record_format_.IsDefault()) {
          _impl_.record_format_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.record_format)
}

// optional int32 shards = 4 [default = 0];
inline bool TaskOutput::has_shards() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void TaskOutput::clear_shards() {
  _impl_.shards_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t TaskOutput::shards() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.shards)
  return _internal_shards();
}
inline void TaskOutput::set_shards(::int32_t value) {
  _internal_set_shards(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.shards)
}
inline ::int32_t TaskOutput::_internal_shards() const {
  return _impl_.shards_;
}
inline void TaskOutput::_internal_set_shards(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.shards_ = value;
}

// optional string file_base = 5;
inline bool TaskOutput::has_file_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TaskOutput::clear_file_base() {
  _impl_.file_base_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TaskOutput::file_base() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.file_base)
  return _internal_file_base();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskOutput::set_file_base(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.file_base_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.file_base)
}
inline std::string* TaskOutput::mutable_file_base() {
  std::string* _s = _internal_mutable_file_base();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.file_base)
  return _s;
}
inline const std::string& TaskOutput::_internal_file_base() const {
  return _impl_.file_base_.Get();
}
inline void TaskOutput::_internal_set_file_base(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.file_base_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskOutput::_internal_mutable_file_base() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.file_base_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskOutput::release_file_base() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.file_base)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.file_base_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskOutput::set_allocated_file_base(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.file_base_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_base_.IsDefault()) {
          _impl_.file_base_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.file_base)
}

// optional string file_extension = 6;
inline bool TaskOutput::has_file_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TaskOutput::clear_file_extension() {
  _impl_.file_extension_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TaskOutput::file_extension() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.file_extension)
  return _internal_file_extension();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskOutput::set_file_extension(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.file_extension_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.file_extension)
}
inline std::string* TaskOutput::mutable_file_extension() {
  std::string* _s = _internal_mutable_file_extension();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.file_extension)
  return _s;
}
inline const std::string& TaskOutput::_internal_file_extension() const {
  return _impl_.file_extension_.Get();
}
inline void TaskOutput::_internal_set_file_extension(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.file_extension_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskOutput::_internal_mutable_file_extension() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.file_extension_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskOutput::release_file_extension() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.file_extension)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.file_extension_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_extension_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskOutput::set_allocated_file_extension(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.file_extension_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_extension_.IsDefault()) {
          _impl_.file_extension_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.file_extension)
}

// -------------------------------------------------------------------

// TaskSpec_Parameter

// required string name = 4;
inline bool TaskSpec_Parameter::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TaskSpec_Parameter::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskSpec_Parameter::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.Parameter.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskSpec_Parameter::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.Parameter.name)
}
inline std::string* TaskSpec_Parameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.Parameter.name)
  return _s;
}
inline const std::string& TaskSpec_Parameter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TaskSpec_Parameter::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskSpec_Parameter::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskSpec_Parameter::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.Parameter.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskSpec_Parameter::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.Parameter.name)
}

// optional string value = 5;
inline bool TaskSpec_Parameter::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TaskSpec_Parameter::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskSpec_Parameter::value() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.Parameter.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskSpec_Parameter::set_value(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.Parameter.value)
}
inline std::string* TaskSpec_Parameter::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.Parameter.value)
  return _s;
}
inline const std::string& TaskSpec_Parameter::_internal_value() const {
  return _impl_.value_.Get();
}
inline void TaskSpec_Parameter::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskSpec_Parameter::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskSpec_Parameter::release_value() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.Parameter.value)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskSpec_Parameter::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.Parameter.value)
}

// -------------------------------------------------------------------

// TaskSpec

// optional string task_name = 1;
inline bool TaskSpec::has_task_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TaskSpec::clear_task_name() {
  _impl_.task_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskSpec::task_name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.task_name)
  return _internal_task_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskSpec::set_task_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.task_name)
}
inline std::string* TaskSpec::mutable_task_name() {
  std::string* _s = _internal_mutable_task_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.task_name)
  return _s;
}
inline const std::string& TaskSpec::_internal_task_name() const {
  return _impl_.task_name_.Get();
}
inline void TaskSpec::_internal_set_task_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskSpec::_internal_mutable_task_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskSpec::release_task_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.task_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.task_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.task_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskSpec::set_allocated_task_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.task_name_.IsDefault()) {
          _impl_.task_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.task_name)
}

// optional string task_type = 2;
inline bool TaskSpec::has_task_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TaskSpec::clear_task_type() {
  _impl_.task_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskSpec::task_type() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.task_type)
  return _internal_task_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskSpec::set_task_type(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.task_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.task_type)
}
inline std::string* TaskSpec::mutable_task_type() {
  std::string* _s = _internal_mutable_task_type();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.task_type)
  return _s;
}
inline const std::string& TaskSpec::_internal_task_type() const {
  return _impl_.task_type_.Get();
}
inline void TaskSpec::_internal_set_task_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.task_type_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskSpec::_internal_mutable_task_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.task_type_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskSpec::release_task_type() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.task_type)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.task_type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.task_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskSpec::set_allocated_task_type(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.task_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.task_type_.IsDefault()) {
          _impl_.task_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.task_type)
}

// repeated group Parameter = 3 { ... };
inline int TaskSpec::_internal_parameter_size() const {
  return _internal_parameter().size();
}
inline int TaskSpec::parameter_size() const {
  return _internal_parameter_size();
}
inline void TaskSpec::clear_parameter() {
  _internal_mutable_parameter()->Clear();
}
inline ::chrome_lang_id::TaskSpec_Parameter* TaskSpec::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.parameter)
  return _internal_mutable_parameter()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter >*
TaskSpec::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskSpec.parameter)
  PROTOBUF_TSAN_WRITE(&_impl_);
  return _internal_mutable_parameter();
}
inline const ::chrome_lang_id::TaskSpec_Parameter& TaskSpec::parameter(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.parameter)
    return _internal_parameter().Get(index);
}
inline ::chrome_lang_id::TaskSpec_Parameter* TaskSpec::add_parameter() {
  PROTOBUF_TSAN_WRITE(&_impl_);
  ::chrome_lang_id::TaskSpec_Parameter* _add = _internal_mutable_parameter()->Add();
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskSpec.parameter)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter >&
TaskSpec::parameter() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskSpec.parameter)
  return _internal_parameter();
}
inline const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskSpec_Parameter>&
TaskSpec::_internal_parameter() const {
  PROTOBUF_TSAN_READ(&_impl_);
  return _impl_.parameter_;
}
inline ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskSpec_Parameter>*
TaskSpec::_internal_mutable_parameter() {
  PROTOBUF_TSAN_READ(&_impl_);
  return &_impl_.parameter_;
}

// repeated .chrome_lang_id.TaskInput input = 6;
inline int TaskSpec::_internal_input_size() const {
  return _internal_input().size();
}
inline int TaskSpec::input_size() const {
  return _internal_input_size();
}
inline void TaskSpec::clear_input() {
  _internal_mutable_input()->Clear();
}
inline ::chrome_lang_id::TaskInput* TaskSpec::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.input)
  return _internal_mutable_input()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput >*
TaskSpec::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskSpec.input)
  PROTOBUF_TSAN_WRITE(&_impl_);
  return _internal_mutable_input();
}
inline const ::chrome_lang_id::TaskInput& TaskSpec::input(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.input)
    return _internal_input().Get(index);
}
inline ::chrome_lang_id::TaskInput* TaskSpec::add_input() {
  PROTOBUF_TSAN_WRITE(&_impl_);
  ::chrome_lang_id::TaskInput* _add = _internal_mutable_input()->Add();
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskSpec.input)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput >&
TaskSpec::input() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskSpec.input)
  return _internal_input();
}
inline const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskInput>&
TaskSpec::_internal_input() const {
  PROTOBUF_TSAN_READ(&_impl_);
  return _impl_.input_;
}
inline ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskInput>*
TaskSpec::_internal_mutable_input() {
  PROTOBUF_TSAN_READ(&_impl_);
  return &_impl_.input_;
}

// repeated .chrome_lang_id.TaskOutput output = 7;
inline int TaskSpec::_internal_output_size() const {
  return _internal_output().size();
}
inline int TaskSpec::output_size() const {
  return _internal_output_size();
}
inline void TaskSpec::clear_output() {
  _internal_mutable_output()->Clear();
}
inline ::chrome_lang_id::TaskOutput* TaskSpec::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.output)
  return _internal_mutable_output()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput >*
TaskSpec::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskSpec.output)
  PROTOBUF_TSAN_WRITE(&_impl_);
  return _internal_mutable_output();
}
inline const ::chrome_lang_id::TaskOutput& TaskSpec::output(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.output)
    return _internal_output().Get(index);
}
inline ::chrome_lang_id::TaskOutput* TaskSpec::add_output() {
  PROTOBUF_TSAN_WRITE(&_impl_);
  ::chrome_lang_id::TaskOutput* _add = _internal_mutable_output()->Add();
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskSpec.output)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput >&
TaskSpec::output() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskSpec.output)
  return _internal_output();
}
inline const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskOutput>&
TaskSpec::_internal_output() const {
  PROTOBUF_TSAN_READ(&_impl_);
  return _impl_.output_;
}
inline ::google::protobuf::RepeatedPtrField<::chrome_lang_id::TaskOutput>*
TaskSpec::_internal_mutable_output() {
  PROTOBUF_TSAN_READ(&_impl_);
  return &_impl_.output_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_lang_id


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_task_5fspec_2eproto_2epb_2eh
