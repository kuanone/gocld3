// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_extractor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_feature_5fextractor_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_feature_5fextractor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_feature_5fextractor_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_feature_5fextractor_2eproto {
  static const ::uint32_t offsets[];
};
namespace chrome_lang_id {
class FeatureExtractorDescriptor;
struct FeatureExtractorDescriptorDefaultTypeInternal;
extern FeatureExtractorDescriptorDefaultTypeInternal _FeatureExtractorDescriptor_default_instance_;
class FeatureFunctionDescriptor;
struct FeatureFunctionDescriptorDefaultTypeInternal;
extern FeatureFunctionDescriptorDefaultTypeInternal _FeatureFunctionDescriptor_default_instance_;
class Parameter;
struct ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
}  // namespace chrome_lang_id
namespace google {
namespace protobuf {
template <>
::chrome_lang_id::FeatureExtractorDescriptor* Arena::CreateMaybeMessage<::chrome_lang_id::FeatureExtractorDescriptor>(Arena*);
template <>
::chrome_lang_id::FeatureFunctionDescriptor* Arena::CreateMaybeMessage<::chrome_lang_id::FeatureFunctionDescriptor>(Arena*);
template <>
::chrome_lang_id::Parameter* Arena::CreateMaybeMessage<::chrome_lang_id::Parameter>(Arena*);
}  // namespace protobuf
}  // namespace google

namespace chrome_lang_id {

// ===================================================================


// -------------------------------------------------------------------

class Parameter final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.Parameter) */ {
 public:
  inline Parameter() : Parameter(nullptr) {}
  ~Parameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Parameter(::google::protobuf::internal::ConstantInitialized);

  Parameter(const Parameter& from);
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter& operator=(Parameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Parameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Parameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Parameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chrome_lang_id.Parameter";
  }
  protected:
  explicit Parameter(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string value = 2;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:chrome_lang_id.Parameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fextractor_2eproto;
};// -------------------------------------------------------------------

class FeatureFunctionDescriptor final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.FeatureFunctionDescriptor) */ {
 public:
  inline FeatureFunctionDescriptor() : FeatureFunctionDescriptor(nullptr) {}
  ~FeatureFunctionDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeatureFunctionDescriptor(::google::protobuf::internal::ConstantInitialized);

  FeatureFunctionDescriptor(const FeatureFunctionDescriptor& from);
  FeatureFunctionDescriptor(FeatureFunctionDescriptor&& from) noexcept
    : FeatureFunctionDescriptor() {
    *this = ::std::move(from);
  }

  inline FeatureFunctionDescriptor& operator=(const FeatureFunctionDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureFunctionDescriptor& operator=(FeatureFunctionDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FeatureFunctionDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureFunctionDescriptor* internal_default_instance() {
    return reinterpret_cast<const FeatureFunctionDescriptor*>(
               &_FeatureFunctionDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeatureFunctionDescriptor& a, FeatureFunctionDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureFunctionDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureFunctionDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureFunctionDescriptor* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureFunctionDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const FeatureFunctionDescriptor& from);
  void MergeFrom(const FeatureFunctionDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureFunctionDescriptor* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chrome_lang_id.FeatureFunctionDescriptor";
  }
  protected:
  explicit FeatureFunctionDescriptor(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterFieldNumber = 4,
    kFeatureFieldNumber = 7,
    kTypeFieldNumber = 1,
    kNameFieldNumber = 2,
    kArgumentFieldNumber = 3,
  };
  // repeated .chrome_lang_id.Parameter parameter = 4;
  int parameter_size() const;
  private:
  int _internal_parameter_size() const;

  public:
  void clear_parameter() ;
  ::chrome_lang_id::Parameter* mutable_parameter(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter >*
      mutable_parameter();
  private:
  const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::Parameter>& _internal_parameter() const;
  ::google::protobuf::RepeatedPtrField<::chrome_lang_id::Parameter>* _internal_mutable_parameter();
  public:
  const ::chrome_lang_id::Parameter& parameter(int index) const;
  ::chrome_lang_id::Parameter* add_parameter();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter >&
      parameter() const;
  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
  int feature_size() const;
  private:
  int _internal_feature_size() const;

  public:
  void clear_feature() ;
  ::chrome_lang_id::FeatureFunctionDescriptor* mutable_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >*
      mutable_feature();
  private:
  const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::FeatureFunctionDescriptor>& _internal_feature() const;
  ::google::protobuf::RepeatedPtrField<::chrome_lang_id::FeatureFunctionDescriptor>* _internal_mutable_feature();
  public:
  const ::chrome_lang_id::FeatureFunctionDescriptor& feature(int index) const;
  ::chrome_lang_id::FeatureFunctionDescriptor* add_feature();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >&
      feature() const;
  // required string type = 1;
  bool has_type() const;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 argument = 3 [default = 0];
  bool has_argument() const;
  void clear_argument() ;
  ::int32_t argument() const;
  void set_argument(::int32_t value);

  private:
  ::int32_t _internal_argument() const;
  void _internal_set_argument(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chrome_lang_id.FeatureFunctionDescriptor)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter > parameter_;
    ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor > feature_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t argument_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fextractor_2eproto;
};// -------------------------------------------------------------------

class FeatureExtractorDescriptor final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.FeatureExtractorDescriptor) */ {
 public:
  inline FeatureExtractorDescriptor() : FeatureExtractorDescriptor(nullptr) {}
  ~FeatureExtractorDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeatureExtractorDescriptor(::google::protobuf::internal::ConstantInitialized);

  FeatureExtractorDescriptor(const FeatureExtractorDescriptor& from);
  FeatureExtractorDescriptor(FeatureExtractorDescriptor&& from) noexcept
    : FeatureExtractorDescriptor() {
    *this = ::std::move(from);
  }

  inline FeatureExtractorDescriptor& operator=(const FeatureExtractorDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureExtractorDescriptor& operator=(FeatureExtractorDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FeatureExtractorDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureExtractorDescriptor* internal_default_instance() {
    return reinterpret_cast<const FeatureExtractorDescriptor*>(
               &_FeatureExtractorDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FeatureExtractorDescriptor& a, FeatureExtractorDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureExtractorDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureExtractorDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureExtractorDescriptor* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureExtractorDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const FeatureExtractorDescriptor& from);
  void MergeFrom(const FeatureExtractorDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureExtractorDescriptor* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chrome_lang_id.FeatureExtractorDescriptor";
  }
  protected:
  explicit FeatureExtractorDescriptor(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
  };
  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
  int feature_size() const;
  private:
  int _internal_feature_size() const;

  public:
  void clear_feature() ;
  ::chrome_lang_id::FeatureFunctionDescriptor* mutable_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >*
      mutable_feature();
  private:
  const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::FeatureFunctionDescriptor>& _internal_feature() const;
  ::google::protobuf::RepeatedPtrField<::chrome_lang_id::FeatureFunctionDescriptor>* _internal_mutable_feature();
  public:
  const ::chrome_lang_id::FeatureFunctionDescriptor& feature(int index) const;
  ::chrome_lang_id::FeatureFunctionDescriptor* add_feature();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >&
      feature() const;
  // @@protoc_insertion_point(class_scope:chrome_lang_id.FeatureExtractorDescriptor)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor > feature_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fextractor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Parameter

// optional string name = 1;
inline bool Parameter::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Parameter::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Parameter::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Parameter.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Parameter::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.Parameter.name)
}
inline std::string* Parameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Parameter.name)
  return _s;
}
inline const std::string& Parameter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Parameter::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Parameter::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Parameter::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.Parameter.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Parameter::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.Parameter.name)
}

// optional string value = 2;
inline bool Parameter::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Parameter::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Parameter::value() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Parameter.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Parameter::set_value(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.Parameter.value)
}
inline std::string* Parameter::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Parameter.value)
  return _s;
}
inline const std::string& Parameter::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Parameter::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Parameter::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* Parameter::release_value() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.Parameter.value)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Parameter::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.Parameter.value)
}

// -------------------------------------------------------------------

// FeatureFunctionDescriptor

// required string type = 1;
inline bool FeatureFunctionDescriptor::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FeatureFunctionDescriptor::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FeatureFunctionDescriptor::type() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureFunctionDescriptor.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeatureFunctionDescriptor::set_type(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.FeatureFunctionDescriptor.type)
}
inline std::string* FeatureFunctionDescriptor::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.FeatureFunctionDescriptor.type)
  return _s;
}
inline const std::string& FeatureFunctionDescriptor::_internal_type() const {
  return _impl_.type_.Get();
}
inline void FeatureFunctionDescriptor::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* FeatureFunctionDescriptor::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* FeatureFunctionDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.FeatureFunctionDescriptor.type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FeatureFunctionDescriptor::set_allocated_type(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.FeatureFunctionDescriptor.type)
}

// optional string name = 2;
inline bool FeatureFunctionDescriptor::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FeatureFunctionDescriptor::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FeatureFunctionDescriptor::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureFunctionDescriptor.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeatureFunctionDescriptor::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_lang_id.FeatureFunctionDescriptor.name)
}
inline std::string* FeatureFunctionDescriptor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.FeatureFunctionDescriptor.name)
  return _s;
}
inline const std::string& FeatureFunctionDescriptor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FeatureFunctionDescriptor::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FeatureFunctionDescriptor::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* FeatureFunctionDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.FeatureFunctionDescriptor.name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FeatureFunctionDescriptor::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.FeatureFunctionDescriptor.name)
}

// optional int32 argument = 3 [default = 0];
inline bool FeatureFunctionDescriptor::has_argument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FeatureFunctionDescriptor::clear_argument() {
  _impl_.argument_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t FeatureFunctionDescriptor::argument() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureFunctionDescriptor.argument)
  return _internal_argument();
}
inline void FeatureFunctionDescriptor::set_argument(::int32_t value) {
  _internal_set_argument(value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.FeatureFunctionDescriptor.argument)
}
inline ::int32_t FeatureFunctionDescriptor::_internal_argument() const {
  return _impl_.argument_;
}
inline void FeatureFunctionDescriptor::_internal_set_argument(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.argument_ = value;
}

// repeated .chrome_lang_id.Parameter parameter = 4;
inline int FeatureFunctionDescriptor::_internal_parameter_size() const {
  return _internal_parameter().size();
}
inline int FeatureFunctionDescriptor::parameter_size() const {
  return _internal_parameter_size();
}
inline void FeatureFunctionDescriptor::clear_parameter() {
  _internal_mutable_parameter()->Clear();
}
inline ::chrome_lang_id::Parameter* FeatureFunctionDescriptor::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.FeatureFunctionDescriptor.parameter)
  return _internal_mutable_parameter()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter >*
FeatureFunctionDescriptor::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.FeatureFunctionDescriptor.parameter)
  PROTOBUF_TSAN_WRITE(&_impl_);
  return _internal_mutable_parameter();
}
inline const ::chrome_lang_id::Parameter& FeatureFunctionDescriptor::parameter(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureFunctionDescriptor.parameter)
    return _internal_parameter().Get(index);
}
inline ::chrome_lang_id::Parameter* FeatureFunctionDescriptor::add_parameter() {
  PROTOBUF_TSAN_WRITE(&_impl_);
  ::chrome_lang_id::Parameter* _add = _internal_mutable_parameter()->Add();
  // @@protoc_insertion_point(field_add:chrome_lang_id.FeatureFunctionDescriptor.parameter)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter >&
FeatureFunctionDescriptor::parameter() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.FeatureFunctionDescriptor.parameter)
  return _internal_parameter();
}
inline const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::Parameter>&
FeatureFunctionDescriptor::_internal_parameter() const {
  PROTOBUF_TSAN_READ(&_impl_);
  return _impl_.parameter_;
}
inline ::google::protobuf::RepeatedPtrField<::chrome_lang_id::Parameter>*
FeatureFunctionDescriptor::_internal_mutable_parameter() {
  PROTOBUF_TSAN_READ(&_impl_);
  return &_impl_.parameter_;
}

// repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
inline int FeatureFunctionDescriptor::_internal_feature_size() const {
  return _internal_feature().size();
}
inline int FeatureFunctionDescriptor::feature_size() const {
  return _internal_feature_size();
}
inline void FeatureFunctionDescriptor::clear_feature() {
  _internal_mutable_feature()->Clear();
}
inline ::chrome_lang_id::FeatureFunctionDescriptor* FeatureFunctionDescriptor::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.FeatureFunctionDescriptor.feature)
  return _internal_mutable_feature()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >*
FeatureFunctionDescriptor::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.FeatureFunctionDescriptor.feature)
  PROTOBUF_TSAN_WRITE(&_impl_);
  return _internal_mutable_feature();
}
inline const ::chrome_lang_id::FeatureFunctionDescriptor& FeatureFunctionDescriptor::feature(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureFunctionDescriptor.feature)
    return _internal_feature().Get(index);
}
inline ::chrome_lang_id::FeatureFunctionDescriptor* FeatureFunctionDescriptor::add_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_);
  ::chrome_lang_id::FeatureFunctionDescriptor* _add = _internal_mutable_feature()->Add();
  // @@protoc_insertion_point(field_add:chrome_lang_id.FeatureFunctionDescriptor.feature)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >&
FeatureFunctionDescriptor::feature() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.FeatureFunctionDescriptor.feature)
  return _internal_feature();
}
inline const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::FeatureFunctionDescriptor>&
FeatureFunctionDescriptor::_internal_feature() const {
  PROTOBUF_TSAN_READ(&_impl_);
  return _impl_.feature_;
}
inline ::google::protobuf::RepeatedPtrField<::chrome_lang_id::FeatureFunctionDescriptor>*
FeatureFunctionDescriptor::_internal_mutable_feature() {
  PROTOBUF_TSAN_READ(&_impl_);
  return &_impl_.feature_;
}

// -------------------------------------------------------------------

// FeatureExtractorDescriptor

// repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
inline int FeatureExtractorDescriptor::_internal_feature_size() const {
  return _internal_feature().size();
}
inline int FeatureExtractorDescriptor::feature_size() const {
  return _internal_feature_size();
}
inline void FeatureExtractorDescriptor::clear_feature() {
  _internal_mutable_feature()->Clear();
}
inline ::chrome_lang_id::FeatureFunctionDescriptor* FeatureExtractorDescriptor::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.FeatureExtractorDescriptor.feature)
  return _internal_mutable_feature()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >*
FeatureExtractorDescriptor::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.FeatureExtractorDescriptor.feature)
  PROTOBUF_TSAN_WRITE(&_impl_);
  return _internal_mutable_feature();
}
inline const ::chrome_lang_id::FeatureFunctionDescriptor& FeatureExtractorDescriptor::feature(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureExtractorDescriptor.feature)
    return _internal_feature().Get(index);
}
inline ::chrome_lang_id::FeatureFunctionDescriptor* FeatureExtractorDescriptor::add_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_);
  ::chrome_lang_id::FeatureFunctionDescriptor* _add = _internal_mutable_feature()->Add();
  // @@protoc_insertion_point(field_add:chrome_lang_id.FeatureExtractorDescriptor.feature)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >&
FeatureExtractorDescriptor::feature() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.FeatureExtractorDescriptor.feature)
  return _internal_feature();
}
inline const ::google::protobuf::RepeatedPtrField<::chrome_lang_id::FeatureFunctionDescriptor>&
FeatureExtractorDescriptor::_internal_feature() const {
  PROTOBUF_TSAN_READ(&_impl_);
  return _impl_.feature_;
}
inline ::google::protobuf::RepeatedPtrField<::chrome_lang_id::FeatureFunctionDescriptor>*
FeatureExtractorDescriptor::_internal_mutable_feature() {
  PROTOBUF_TSAN_READ(&_impl_);
  return &_impl_.feature_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_lang_id


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_feature_5fextractor_2eproto_2epb_2eh
