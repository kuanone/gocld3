// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_extractor.proto

#include "feature_extractor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace chrome_lang_id {
        template <typename>
PROTOBUF_CONSTEXPR Parameter::Parameter(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.value_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct ParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParameterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParameterDefaultTypeInternal() {}
  union {
    Parameter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParameterDefaultTypeInternal _Parameter_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FeatureFunctionDescriptor::FeatureFunctionDescriptor(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.parameter_)*/ {},
      /*decltype(_impl_.feature_)*/ {},
      /*decltype(_impl_.type_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.argument_)*/ 0,
    } {}
struct FeatureFunctionDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureFunctionDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureFunctionDescriptorDefaultTypeInternal() {}
  union {
    FeatureFunctionDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureFunctionDescriptorDefaultTypeInternal _FeatureFunctionDescriptor_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FeatureExtractorDescriptor::FeatureExtractorDescriptor(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.feature_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FeatureExtractorDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureExtractorDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureExtractorDescriptorDefaultTypeInternal() {}
  union {
    FeatureExtractorDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureExtractorDescriptorDefaultTypeInternal _FeatureExtractorDescriptor_default_instance_;
}  // namespace chrome_lang_id
namespace chrome_lang_id {
// ===================================================================

class Parameter::_Internal {
 public:
  using HasBits = decltype(std::declval<Parameter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Parameter, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Parameter::Parameter(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chrome_lang_id.Parameter)
}
Parameter::Parameter(const Parameter& from) : ::google::protobuf::MessageLite() {
  Parameter* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.value_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.Parameter)
}
inline void Parameter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.value_){},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.Parameter)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Parameter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}
void Parameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.Parameter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Parameter::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Parameter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Parameter, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Parameter_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional string value = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Parameter, _impl_.value_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Parameter, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(Parameter, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string value = 2;
    {PROTOBUF_FIELD_OFFSET(Parameter, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Parameter::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_lang_id.Parameter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_value();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_lang_id.Parameter)
  return target;
}

::size_t Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.Parameter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Parameter*>(
      &from));
}

void Parameter::MergeFrom(const Parameter& from) {
  Parameter* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.Parameter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Parameter::IsInitialized() const {
  return true;
}

void Parameter::InternalSwap(Parameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

std::string Parameter::GetTypeName() const {
  return "chrome_lang_id.Parameter";
}

// ===================================================================

class FeatureFunctionDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureFunctionDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_argument(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FeatureFunctionDescriptor::FeatureFunctionDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chrome_lang_id.FeatureFunctionDescriptor)
}
FeatureFunctionDescriptor::FeatureFunctionDescriptor(const FeatureFunctionDescriptor& from) : ::google::protobuf::MessageLite() {
  FeatureFunctionDescriptor* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.parameter_){from._impl_.parameter_},
      decltype(_impl_.feature_){from._impl_.feature_},
      decltype(_impl_.type_){},
      decltype(_impl_.name_){},
      decltype(_impl_.argument_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.argument_ = from._impl_.argument_;

  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.FeatureFunctionDescriptor)
}
inline void FeatureFunctionDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.parameter_){arena},
      decltype(_impl_.feature_){arena},
      decltype(_impl_.type_){},
      decltype(_impl_.name_){},
      decltype(_impl_.argument_){0},
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
FeatureFunctionDescriptor::~FeatureFunctionDescriptor() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.FeatureFunctionDescriptor)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void FeatureFunctionDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameter_.~RepeatedPtrField();
  _impl_.feature_.~RepeatedPtrField();
  _impl_.type_.Destroy();
  _impl_.name_.Destroy();
}
void FeatureFunctionDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FeatureFunctionDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.FeatureFunctionDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_parameter()->Clear();
  _internal_mutable_feature()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.argument_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FeatureFunctionDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> FeatureFunctionDescriptor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967216,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FeatureFunctionDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required string type = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_.type_)}},
    // optional string name = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_.name_)}},
    // optional int32 argument = 3 [default = 0];
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_.argument_)}},
    // repeated .chrome_lang_id.Parameter parameter = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_.parameter_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 1, PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_.feature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required string type = 1;
    {PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_.type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string name = 2;
    {PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_.name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 argument = 3 [default = 0];
    {PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_.argument_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .chrome_lang_id.Parameter parameter = 4;
    {PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_.parameter_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
    {PROTOBUF_FIELD_OFFSET(FeatureFunctionDescriptor, _impl_.feature_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::chrome_lang_id::Parameter>()},
    {::_pbi::TcParser::GetTable<::chrome_lang_id::FeatureFunctionDescriptor>()},
  }}, {{
  }},
};

::uint8_t* FeatureFunctionDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_lang_id.FeatureFunctionDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_type();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 argument = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_argument(), target);
  }

  // repeated .chrome_lang_id.Parameter parameter = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parameter_size()); i < n; i++) {
    const auto& repfield = this->_internal_parameter().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_lang_id.FeatureFunctionDescriptor)
  return target;
}

::size_t FeatureFunctionDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.FeatureFunctionDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chrome_lang_id.Parameter parameter = 4;
  total_size += 1UL * this->_internal_parameter_size();
  for (const auto& msg : this->_internal_parameter()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->_internal_feature()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // required string type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  if (cached_has_bits & 0x00000006u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 argument = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_argument());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureFunctionDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FeatureFunctionDescriptor*>(
      &from));
}

void FeatureFunctionDescriptor::MergeFrom(const FeatureFunctionDescriptor& from) {
  FeatureFunctionDescriptor* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.FeatureFunctionDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_parameter()->MergeFrom(from._internal_parameter());
  _this->_internal_mutable_feature()->MergeFrom(from._internal_feature());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.argument_ = from._impl_.argument_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FeatureFunctionDescriptor::CopyFrom(const FeatureFunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.FeatureFunctionDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FeatureFunctionDescriptor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(_internal_feature()))
    return false;
  return true;
}

void FeatureFunctionDescriptor::InternalSwap(FeatureFunctionDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_parameter()->InternalSwap(other->_internal_mutable_parameter());
  _internal_mutable_feature()->InternalSwap(other->_internal_mutable_feature());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
        swap(_impl_.argument_, other->_impl_.argument_);
}

std::string FeatureFunctionDescriptor::GetTypeName() const {
  return "chrome_lang_id.FeatureFunctionDescriptor";
}

// ===================================================================

class FeatureExtractorDescriptor::_Internal {
 public:
};

FeatureExtractorDescriptor::FeatureExtractorDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chrome_lang_id.FeatureExtractorDescriptor)
}
FeatureExtractorDescriptor::FeatureExtractorDescriptor(const FeatureExtractorDescriptor& from) : ::google::protobuf::MessageLite() {
  FeatureExtractorDescriptor* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){from._impl_.feature_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.FeatureExtractorDescriptor)
}
inline void FeatureExtractorDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
FeatureExtractorDescriptor::~FeatureExtractorDescriptor() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.FeatureExtractorDescriptor)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void FeatureExtractorDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_.~RepeatedPtrField();
}
void FeatureExtractorDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FeatureExtractorDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.FeatureExtractorDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_feature()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FeatureExtractorDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FeatureExtractorDescriptor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FeatureExtractorDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FeatureExtractorDescriptor, _impl_.feature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
    {PROTOBUF_FIELD_OFFSET(FeatureExtractorDescriptor, _impl_.feature_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::chrome_lang_id::FeatureFunctionDescriptor>()},
  }}, {{
  }},
};

::uint8_t* FeatureExtractorDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_lang_id.FeatureExtractorDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_lang_id.FeatureExtractorDescriptor)
  return target;
}

::size_t FeatureExtractorDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.FeatureExtractorDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->_internal_feature()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureExtractorDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FeatureExtractorDescriptor*>(
      &from));
}

void FeatureExtractorDescriptor::MergeFrom(const FeatureExtractorDescriptor& from) {
  FeatureExtractorDescriptor* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.FeatureExtractorDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_feature()->MergeFrom(from._internal_feature());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FeatureExtractorDescriptor::CopyFrom(const FeatureExtractorDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.FeatureExtractorDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FeatureExtractorDescriptor::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(_internal_feature()))
    return false;
  return true;
}

void FeatureExtractorDescriptor::InternalSwap(FeatureExtractorDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_feature()->InternalSwap(other->_internal_mutable_feature());
}

std::string FeatureExtractorDescriptor::GetTypeName() const {
  return "chrome_lang_id.FeatureExtractorDescriptor";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_lang_id
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::chrome_lang_id::Parameter*
Arena::CreateMaybeMessage< ::chrome_lang_id::Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_lang_id::Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_lang_id::FeatureFunctionDescriptor*
Arena::CreateMaybeMessage< ::chrome_lang_id::FeatureFunctionDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_lang_id::FeatureFunctionDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_lang_id::FeatureExtractorDescriptor*
Arena::CreateMaybeMessage< ::chrome_lang_id::FeatureExtractorDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_lang_id::FeatureExtractorDescriptor >(arena);
}
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
